
Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034c  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e1  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  000017a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 **********************************************************************/
int main(void)
{
    // Green LED at port B
    // Set pin as output in Data Direction Register...
    DDRC = DDRC | (1<<LED_0);
  80:	3c 9a       	sbi	0x07, 4	; 7
    PORTC = PORTC & ~(1<<LED_0);
  82:	44 98       	cbi	0x08, 4	; 8

    DDRC = DDRC | (1<<LED_1);
  84:	3b 9a       	sbi	0x07, 3	; 7
    PORTC = PORTC  & ~(1<<LED_1);
  86:	43 98       	cbi	0x08, 3	; 8
	
	DDRC = DDRC | (1<<LED_2);
  88:	3a 9a       	sbi	0x07, 2	; 7
	PORTC = PORTC & ~(1<<LED_2);
  8a:	42 98       	cbi	0x08, 2	; 8
	
	DDRB = DDRB | (1<<LED_3);
  8c:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB & ~(1<<LED_3);
  8e:	2d 98       	cbi	0x05, 5	; 5
	
	DDRB = DDRB | (1<<LED_4);
  90:	24 9a       	sbi	0x04, 4	; 4
	PORTB = PORTB & ~(1<<LED_4);
  92:	2c 98       	cbi	0x05, 4	; 5
    
    // Configure Push button at port D and enable internal pull-up resistor
    DDRD = DDRD & ~(1<<BUTTON);
  94:	50 98       	cbi	0x0a, 0	; 10
    PORTD = PORTD | (1<<BUTTON);
  96:	58 9a       	sbi	0x0b, 0	; 11
    
	int counter = 0;
	bool appSwitch = false;
	bool isAddingDirection = false;
  98:	30 e0       	ldi	r19, 0x00	; 0
    // Configure Push button at port D and enable internal pull-up resistor
    DDRD = DDRD & ~(1<<BUTTON);
    PORTD = PORTD | (1<<BUTTON);
    
	int counter = 0;
	bool appSwitch = false;
  9a:	20 e0       	ldi	r18, 0x00	; 0
    
    // Configure Push button at port D and enable internal pull-up resistor
    DDRD = DDRD & ~(1<<BUTTON);
    PORTD = PORTD | (1<<BUTTON);
    
	int counter = 0;
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
    // Infinite loop
    while (1)
    {      	
        if(bit_is_clear(PIND, BUTTON))    
        {
			appSwitch = !appSwitch;
  a0:	61 e0       	ldi	r22, 0x01	; 1
			{
				PORTB = PORTB ^ (1<<counter);
			}
			else
			{
				PORTC = PORTC ^ (1<<counter);
  a2:	e1 e0       	ldi	r30, 0x01	; 1
  a4:	f0 e0       	ldi	r31, 0x00	; 0
					PORTB = PORTB ^ (1<<LED_4);
					isAddingDirection = false;
					break;
			}
						
			isAddingDirection ? counter++ : counter--;
  a6:	a0 e0       	ldi	r26, 0x00	; 0
						PORTC = PORTC ^ (1<<LED_1);
						PORTC = PORTC ^ (1<<LED_2);
					}
					else
					{
						PORTB = PORTB ^ (1<<LED_3);
  a8:	d0 e2       	ldi	r29, 0x20	; 32
						PORTC = PORTC ^ (1<<LED_2);
  aa:	14 e0       	ldi	r17, 0x04	; 4
					}
					break;
				case 2:
					if(isAddingDirection)
					{
						PORTC = PORTC ^ (1<<LED_1);
  ac:	c8 e0       	ldi	r28, 0x08	; 8
						PORTC = PORTC ^ (1<<LED_2);
						PORTB = PORTB ^ (1<<LED_3);
					}
					else
					{
						PORTB = PORTB ^ (1<<LED_4);
  ae:	b0 e1       	ldi	r27, 0x10	; 16
	bool isAddingDirection = false;
	
    // Infinite loop
    while (1)
    {      	
        if(bit_is_clear(PIND, BUTTON))    
  b0:	48 99       	sbic	0x09, 0	; 9
  b2:	1b c0       	rjmp	.+54     	; 0xea <main+0x6a>
        {
			appSwitch = !appSwitch;
  b4:	26 27       	eor	r18, r22
			loop_until_bit_is_set(PIND, BUTTON);
  b6:	48 9b       	sbis	0x09, 0	; 9
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x36>
			if(counter > 2)
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	91 05       	cpc	r25, r1
  be:	5c f0       	brlt	.+22     	; 0xd6 <main+0x56>
			{
				PORTB = PORTB ^ (1<<counter);
  c0:	75 b1       	in	r23, 0x05	; 5
  c2:	af 01       	movw	r20, r30
  c4:	08 2e       	mov	r0, r24
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x4c>
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <main+0x48>
  d0:	47 27       	eor	r20, r23
  d2:	45 b9       	out	0x05, r20	; 5
  d4:	0a c0       	rjmp	.+20     	; 0xea <main+0x6a>
			}
			else
			{
				PORTC = PORTC ^ (1<<counter);
  d6:	78 b1       	in	r23, 0x08	; 8
  d8:	af 01       	movw	r20, r30
  da:	08 2e       	mov	r0, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x62>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x5e>
  e6:	47 27       	eor	r20, r23
  e8:	48 b9       	out	0x08, r20	; 8
			}
        }
		
		if(appSwitch)
  ea:	22 23       	and	r18, r18
  ec:	09 f3       	breq	.-62     	; 0xb0 <main+0x30>
		{		
			switch (counter)
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	91 05       	cpc	r25, r1
  f2:	29 f1       	breq	.+74     	; 0x13e <main+0xbe>
  f4:	34 f4       	brge	.+12     	; 0x102 <main+0x82>
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	59 f0       	breq	.+22     	; 0x110 <main+0x90>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	91 05       	cpc	r25, r1
  fe:	79 f0       	breq	.+30     	; 0x11e <main+0x9e>
 100:	45 c0       	rjmp	.+138    	; 0x18c <main+0x10c>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	91 05       	cpc	r25, r1
 106:	59 f1       	breq	.+86     	; 0x15e <main+0xde>
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	91 05       	cpc	r25, r1
 10c:	c1 f1       	breq	.+112    	; 0x17e <main+0xfe>
 10e:	3e c0       	rjmp	.+124    	; 0x18c <main+0x10c>
			{
				case 0:
					PORTB = PORTB ^ (1<<LED_1);
 110:	35 b1       	in	r19, 0x05	; 5
 112:	3c 27       	eor	r19, r28
 114:	35 b9       	out	0x05, r19	; 5
					PORTC = PORTC ^ (1<<LED_0);
 116:	38 b1       	in	r19, 0x08	; 8
 118:	3b 27       	eor	r19, r27
 11a:	38 b9       	out	0x08, r19	; 8
					isAddingDirection = true;
					break;
 11c:	39 c0       	rjmp	.+114    	; 0x190 <main+0x110>
				case 1:
					if(isAddingDirection)
 11e:	33 23       	and	r19, r19
 120:	39 f0       	breq	.+14     	; 0x130 <main+0xb0>
					{
						PORTC = PORTC ^ (1<<LED_0);
 122:	38 b1       	in	r19, 0x08	; 8
 124:	3b 27       	eor	r19, r27
 126:	38 b9       	out	0x08, r19	; 8
						PORTC = PORTC ^ (1<<LED_1);
 128:	38 b1       	in	r19, 0x08	; 8
 12a:	3c 27       	eor	r19, r28
 12c:	38 b9       	out	0x08, r19	; 8
 12e:	30 c0       	rjmp	.+96     	; 0x190 <main+0x110>
					}
					else
					{
						PORTC = PORTC ^ (1<<LED_2);
 130:	38 b1       	in	r19, 0x08	; 8
 132:	31 27       	eor	r19, r17
 134:	38 b9       	out	0x08, r19	; 8
						PORTC = PORTC ^ (1<<LED_1);
 136:	38 b1       	in	r19, 0x08	; 8
 138:	3c 27       	eor	r19, r28
 13a:	38 b9       	out	0x08, r19	; 8
 13c:	2c c0       	rjmp	.+88     	; 0x196 <main+0x116>
					}
					break;
				case 2:
					if(isAddingDirection)
 13e:	33 23       	and	r19, r19
 140:	39 f0       	breq	.+14     	; 0x150 <main+0xd0>
					{
						PORTC = PORTC ^ (1<<LED_1);
 142:	38 b1       	in	r19, 0x08	; 8
 144:	3c 27       	eor	r19, r28
 146:	38 b9       	out	0x08, r19	; 8
						PORTC = PORTC ^ (1<<LED_2);
 148:	38 b1       	in	r19, 0x08	; 8
 14a:	31 27       	eor	r19, r17
 14c:	38 b9       	out	0x08, r19	; 8
 14e:	20 c0       	rjmp	.+64     	; 0x190 <main+0x110>
					}
					else
					{
						PORTB = PORTB ^ (1<<LED_3);
 150:	35 b1       	in	r19, 0x05	; 5
 152:	3d 27       	eor	r19, r29
 154:	35 b9       	out	0x05, r19	; 5
						PORTC = PORTC ^ (1<<LED_2);
 156:	38 b1       	in	r19, 0x08	; 8
 158:	31 27       	eor	r19, r17
 15a:	38 b9       	out	0x08, r19	; 8
 15c:	1c c0       	rjmp	.+56     	; 0x196 <main+0x116>
					}
					break;
				case 3:
					if(isAddingDirection)
 15e:	33 23       	and	r19, r19
 160:	39 f0       	breq	.+14     	; 0x170 <main+0xf0>
					{
						PORTC = PORTC ^ (1<<LED_2);
 162:	38 b1       	in	r19, 0x08	; 8
 164:	31 27       	eor	r19, r17
 166:	38 b9       	out	0x08, r19	; 8
						PORTB = PORTB ^ (1<<LED_3);
 168:	35 b1       	in	r19, 0x05	; 5
 16a:	3d 27       	eor	r19, r29
 16c:	35 b9       	out	0x05, r19	; 5
 16e:	10 c0       	rjmp	.+32     	; 0x190 <main+0x110>
					}
					else
					{
						PORTB = PORTB ^ (1<<LED_4);
 170:	35 b1       	in	r19, 0x05	; 5
 172:	3b 27       	eor	r19, r27
 174:	35 b9       	out	0x05, r19	; 5
						PORTB = PORTB ^ (1<<LED_3);
 176:	35 b1       	in	r19, 0x05	; 5
 178:	3d 27       	eor	r19, r29
 17a:	35 b9       	out	0x05, r19	; 5
 17c:	0c c0       	rjmp	.+24     	; 0x196 <main+0x116>
					}
					break;
				case 4:
					PORTB = PORTB ^ (1<<LED_3);
 17e:	35 b1       	in	r19, 0x05	; 5
 180:	3d 27       	eor	r19, r29
 182:	35 b9       	out	0x05, r19	; 5
					PORTB = PORTB ^ (1<<LED_4);
 184:	35 b1       	in	r19, 0x05	; 5
 186:	3b 27       	eor	r19, r27
 188:	35 b9       	out	0x05, r19	; 5
					isAddingDirection = false;
					break;
 18a:	05 c0       	rjmp	.+10     	; 0x196 <main+0x116>
			}
						
			isAddingDirection ? counter++ : counter--;
 18c:	33 23       	and	r19, r19
 18e:	19 f0       	breq	.+6      	; 0x196 <main+0x116>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	36 2f       	mov	r19, r22
 194:	02 c0       	rjmp	.+4      	; 0x19a <main+0x11a>
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	3a 2f       	mov	r19, r26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	4f ef       	ldi	r20, 0xFF	; 255
 19c:	53 ec       	ldi	r21, 0xC3	; 195
 19e:	79 e0       	ldi	r23, 0x09	; 9
 1a0:	41 50       	subi	r20, 0x01	; 1
 1a2:	50 40       	sbci	r21, 0x00	; 0
 1a4:	70 40       	sbci	r23, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x120>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x12a>
 1aa:	00 00       	nop
 1ac:	81 cf       	rjmp	.-254    	; 0xb0 <main+0x30>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
