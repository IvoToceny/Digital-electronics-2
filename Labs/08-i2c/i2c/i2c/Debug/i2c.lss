
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000003fe  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800120  00800120  000004b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8f  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069b  00000000  00000000  00001da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a3  00000000  00000000  00002b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000030f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_18>
  4c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 8b 01 	call	0x316	; 0x316 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 b9 01 	call	0x372	; 0x372 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <__vector_13+0x28>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_TEMP;  // Current state of the FSM
    static uint8_t addr = 92;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
    
    // FSM
    switch (state)
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	51 f0       	breq	.+20     	; 0x128 <__vector_13+0x50>
 114:	20 f4       	brcc	.+8      	; 0x11e <__vector_13+0x46>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	09 f4       	brne	.+2      	; 0x11c <__vector_13+0x44>
 11a:	54 c0       	rjmp	.+168    	; 0x1c4 <__vector_13+0xec>
 11c:	50 c0       	rjmp	.+160    	; 0x1be <__vector_13+0xe6>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	c9 f0       	breq	.+50     	; 0x154 <__vector_13+0x7c>
 122:	84 30       	cpi	r24, 0x04	; 4
 124:	79 f1       	breq	.+94     	; 0x184 <__vector_13+0xac>
 126:	4b c0       	rjmp	.+150    	; 0x1be <__vector_13+0xe6>
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        
        result = twi_start((addr<<1) + TWI_READ);
 128:	89 eb       	ldi	r24, 0xB9	; 185
 12a:	0e 94 06 01 	call	0x20c	; 0x20c <twi_start>
        itoa(twi_read_ack(), uart_string, 10);
 12e:	0e 94 24 01 	call	0x248	; 0x248 <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 132:	4a e0       	ldi	r20, 0x0A	; 10
 134:	be 01       	movw	r22, r28
 136:	6f 5f       	subi	r22, 0xFF	; 255
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 c8 01 	call	0x390	; 0x390 <__itoa_ncheck>
        uart_puts(uart_string);
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	0e 94 b9 01 	call	0x372	; 0x372 <uart_puts>
        twi_stop();
 148:	0e 94 2f 01 	call	0x25e	; 0x25e <twi_stop>
        
        state = STATE_TEMP;
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        
        break;
 152:	38 c0       	rjmp	.+112    	; 0x1c4 <__vector_13+0xec>

    // A module connected to the bus was found
    case STATE_TEMP:
        // Send info about active I2C slave to UART and move to IDLE
        result = twi_start((addr<<1) + TWI_READ);
 154:	89 eb       	ldi	r24, 0xB9	; 185
 156:	0e 94 06 01 	call	0x20c	; 0x20c <twi_start>
        itoa(twi_read_ack(), uart_string, 10);
 15a:	0e 94 24 01 	call	0x248	; 0x248 <twi_read_ack>
 15e:	4a e0       	ldi	r20, 0x0A	; 10
 160:	be 01       	movw	r22, r28
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 c8 01 	call	0x390	; 0x390 <__itoa_ncheck>
        uart_puts(uart_string);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 b9 01 	call	0x372	; 0x372 <uart_puts>
        uart_puts("\r\n");
 174:	8c e1       	ldi	r24, 0x1C	; 28
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 b9 01 	call	0x372	; 0x372 <uart_puts>
        state = STATE_IDLE;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
 182:	20 c0       	rjmp	.+64     	; 0x1c4 <__vector_13+0xec>
 184:	4a e0       	ldi	r20, 0x0A	; 10
 186:	be 01       	movw	r22, r28
 188:	6f 5f       	subi	r22, 0xFF	; 255
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	8c e5       	ldi	r24, 0x5C	; 92
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 c8 01 	call	0x390	; 0x390 <__itoa_ncheck>
        
    case STATE_CHECK:
        // Send info about active I2C slave to UART and move to IDLE
        itoa(addr, uart_string, 10);
        itoa(twi_read_ack(), uart_string, 10);
 194:	0e 94 24 01 	call	0x248	; 0x248 <twi_read_ack>
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	be 01       	movw	r22, r28
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 c8 01 	call	0x390	; 0x390 <__itoa_ncheck>
        uart_puts(uart_string);
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	0e 94 b9 01 	call	0x372	; 0x372 <uart_puts>
        uart_puts("\r\n");
 1ae:	8c e1       	ldi	r24, 0x1C	; 28
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 b9 01 	call	0x372	; 0x372 <uart_puts>
        state = STATE_IDLE;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <__vector_13+0xec>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
    }
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 1ee:	87 b1       	in	r24, 0x07	; 7
 1f0:	8f 7c       	andi	r24, 0xCF	; 207
 1f2:	87 b9       	out	0x07, r24	; 7
 1f4:	88 b1       	in	r24, 0x08	; 8
 1f6:	80 63       	ori	r24, 0x30	; 48
 1f8:	88 b9       	out	0x08, r24	; 8
 1fa:	e9 eb       	ldi	r30, 0xB9	; 185
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	8c 7f       	andi	r24, 0xFC	; 252
 202:	80 83       	st	Z, r24
 204:	88 e9       	ldi	r24, 0x98	; 152
 206:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 20a:	08 95       	ret

0000020c <twi_start>:
 20c:	94 ea       	ldi	r25, 0xA4	; 164
 20e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 212:	ec eb       	ldi	r30, 0xBC	; 188
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	90 81       	ld	r25, Z
 218:	99 23       	and	r25, r25
 21a:	ec f7       	brge	.-6      	; 0x216 <twi_start+0xa>
 21c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 220:	84 e8       	ldi	r24, 0x84	; 132
 222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 226:	ec eb       	ldi	r30, 0xBC	; 188
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	88 23       	and	r24, r24
 22e:	ec f7       	brge	.-6      	; 0x22a <twi_start+0x1e>
 230:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 234:	98 7f       	andi	r25, 0xF8	; 248
 236:	98 31       	cpi	r25, 0x18	; 24
 238:	29 f0       	breq	.+10     	; 0x244 <twi_start+0x38>
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 34       	cpi	r25, 0x40	; 64
 23e:	19 f4       	brne	.+6      	; 0x246 <twi_start+0x3a>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	08 95       	ret
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret

00000248 <twi_read_ack>:
 248:	84 ec       	ldi	r24, 0xC4	; 196
 24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 24e:	ec eb       	ldi	r30, 0xBC	; 188
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	88 23       	and	r24, r24
 256:	ec f7       	brge	.-6      	; 0x252 <twi_read_ack+0xa>
 258:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 25c:	08 95       	ret

0000025e <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 25e:	84 e9       	ldi	r24, 0x94	; 148
 260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 264:	08 95       	ret

00000266 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
 27a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 27e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 282:	8c 71       	andi	r24, 0x1C	; 28
 284:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <UART_RxHead>
 288:	ef 5f       	subi	r30, 0xFF	; 255
 28a:	ef 71       	andi	r30, 0x1F	; 31
 28c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_RxTail>
 290:	e9 17       	cp	r30, r25
 292:	39 f0       	breq	.+14     	; 0x2a2 <__vector_18+0x3c>
 294:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <UART_RxHead>
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	eb 5d       	subi	r30, 0xDB	; 219
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	20 83       	st	Z, r18
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <__vector_18+0x3e>
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 2a8:	89 2b       	or	r24, r25
 2aa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_19>:
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
 2d4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxHead>
 2d8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_TxTail>
 2dc:	98 17       	cp	r25, r24
 2de:	69 f0       	breq	.+26     	; 0x2fa <__vector_19+0x38>
 2e0:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_TxTail>
 2e4:	ef 5f       	subi	r30, 0xFF	; 255
 2e6:	ef 71       	andi	r30, 0x1F	; 31
 2e8:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_TxTail>
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	eb 5b       	subi	r30, 0xBB	; 187
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	80 81       	ld	r24, Z
 2f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <__vector_19+0x42>
 2fa:	e1 ec       	ldi	r30, 0xC1	; 193
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	8f 7d       	andi	r24, 0xDF	; 223
 302:	80 83       	st	Z, r24
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <uart_init>:
 316:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxHead>
 31a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_TxTail>
 31e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxHead>
 322:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_RxTail>
 326:	99 23       	and	r25, r25
 328:	1c f4       	brge	.+6      	; 0x330 <uart_init+0x1a>
 32a:	22 e0       	ldi	r18, 0x02	; 2
 32c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 330:	90 78       	andi	r25, 0x80	; 128
 332:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 336:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 33a:	88 e9       	ldi	r24, 0x98	; 152
 33c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 346:	08 95       	ret

00000348 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 348:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <UART_TxHead>
 34c:	2f 5f       	subi	r18, 0xFF	; 255
 34e:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 350:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_TxTail>
 354:	29 17       	cp	r18, r25
 356:	e1 f3       	breq	.-8      	; 0x350 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 358:	e2 2f       	mov	r30, r18
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	eb 5b       	subi	r30, 0xBB	; 187
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 362:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 366:	e1 ec       	ldi	r30, 0xC1	; 193
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	80 62       	ori	r24, 0x20	; 32
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret

00000372 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	ec 01       	movw	r28, r24
    while (*s)
 378:	88 81       	ld	r24, Y
 37a:	88 23       	and	r24, r24
 37c:	31 f0       	breq	.+12     	; 0x38a <uart_puts+0x18>
 37e:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 380:	0e 94 a4 01 	call	0x348	; 0x348 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 384:	89 91       	ld	r24, Y+
 386:	81 11       	cpse	r24, r1
 388:	fb cf       	rjmp	.-10     	; 0x380 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <__itoa_ncheck>:
 390:	bb 27       	eor	r27, r27
 392:	4a 30       	cpi	r20, 0x0A	; 10
 394:	31 f4       	brne	.+12     	; 0x3a2 <__itoa_ncheck+0x12>
 396:	99 23       	and	r25, r25
 398:	22 f4       	brpl	.+8      	; 0x3a2 <__itoa_ncheck+0x12>
 39a:	bd e2       	ldi	r27, 0x2D	; 45
 39c:	90 95       	com	r25
 39e:	81 95       	neg	r24
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__utoa_common>

000003a6 <__utoa_ncheck>:
 3a6:	bb 27       	eor	r27, r27

000003a8 <__utoa_common>:
 3a8:	fb 01       	movw	r30, r22
 3aa:	55 27       	eor	r21, r21
 3ac:	aa 27       	eor	r26, r26
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	aa 1f       	adc	r26, r26
 3b4:	a4 17       	cp	r26, r20
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <__utoa_common+0x14>
 3b8:	a4 1b       	sub	r26, r20
 3ba:	83 95       	inc	r24
 3bc:	50 51       	subi	r21, 0x10	; 16
 3be:	b9 f7       	brne	.-18     	; 0x3ae <__utoa_common+0x6>
 3c0:	a0 5d       	subi	r26, 0xD0	; 208
 3c2:	aa 33       	cpi	r26, 0x3A	; 58
 3c4:	08 f0       	brcs	.+2      	; 0x3c8 <__utoa_common+0x20>
 3c6:	a9 5d       	subi	r26, 0xD9	; 217
 3c8:	a1 93       	st	Z+, r26
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	79 f7       	brne	.-34     	; 0x3ac <__utoa_common+0x4>
 3ce:	b1 11       	cpse	r27, r1
 3d0:	b1 93       	st	Z+, r27
 3d2:	11 92       	st	Z+, r1
 3d4:	cb 01       	movw	r24, r22
 3d6:	0c 94 ed 01 	jmp	0x3da	; 0x3da <strrev>

000003da <strrev>:
 3da:	dc 01       	movw	r26, r24
 3dc:	fc 01       	movw	r30, r24
 3de:	67 2f       	mov	r22, r23
 3e0:	71 91       	ld	r23, Z+
 3e2:	77 23       	and	r23, r23
 3e4:	e1 f7       	brne	.-8      	; 0x3de <strrev+0x4>
 3e6:	32 97       	sbiw	r30, 0x02	; 2
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <strrev+0x18>
 3ea:	7c 91       	ld	r23, X
 3ec:	6d 93       	st	X+, r22
 3ee:	70 83       	st	Z, r23
 3f0:	62 91       	ld	r22, -Z
 3f2:	ae 17       	cp	r26, r30
 3f4:	bf 07       	cpc	r27, r31
 3f6:	c8 f3       	brcs	.-14     	; 0x3ea <strrev+0x10>
 3f8:	08 95       	ret

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
